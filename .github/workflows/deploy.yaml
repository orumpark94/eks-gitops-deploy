name: Deploy or Destroy via Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
          - data check
          - import

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Ensure S3 bucket exists for Terraform state
        run: |
          set -x
          BUCKET_NAME="eks-gitops-tfstate-20250415"
          REGION="ap-northeast-2"

          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "✅ S3 bucket '$BUCKET_NAME' already exists."
          else
            echo "⏳ Creating S3 bucket '$BUCKET_NAME'..."
            aws s3api create-bucket \
              --bucket "$BUCKET_NAME" \
              --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
            echo "✅ S3 bucket created."
          fi

      - name: Terraform Init
        working-directory: infrastructure/
        run: |
          set -x
          terraform init

      - name: Terraform Import aws-auth
        if: ${{ github.event.inputs.action == 'import' }}
        working-directory: infrastructure/
        run: |
          set -x
          terraform import kubernetes_config_map.aws_auth kube-system/aws-auth

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/
        run: |
          set -x
          terraform plan

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/
        run: |
          set -x
          terraform apply -auto-approve

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: infrastructure/
        run: |
          set -x
          terraform destroy -auto-approve

      - name: Install kubectl
        if: ${{ github.event.inputs.action == 'data check' }}
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubeconfig
        if: ${{ github.event.inputs.action == 'data check' }}
        run: |
          aws eks update-kubeconfig --name eks-gitops-cluster --region ap-northeast-2

      - name: Show aws-auth ConfigMap
        if: ${{ github.event.inputs.action == 'data check' }}
        run: |
          echo "📦 현재 aws-auth ConfigMap 내용:"
          kubectl get configmap aws-auth -n kube-system -o yaml

      - name: Describe EKS Nodes
        if: ${{ github.event.inputs.action == 'data check' }}
        run: |
          echo "🔎 클러스터에 조인된 노드 확인 중..."
          kubectl get nodes -o wide || echo "❌ 노드 없음 또는 연결 실패"

      - name: Check EC2 Node Instances
        if: ${{ github.event.inputs.action == 'data check' }}
        run: |
          echo "🔍 EC2 인스턴스 상태 확인 중..."
          aws ec2 describe-instances \
            --filters "Name=tag:eks:nodegroup-name,Values=eks-node-group" \
            --query "Reservations[].Instances[].{ID:InstanceId,State:State.Name,AZ:Placement.AvailabilityZone,PrivateIP:PrivateIpAddress}" \
            --output table

      - name: Fetch EC2 System Logs (최근 인스턴스 1개)
        if: ${{ github.event.inputs.action == 'data check' }}
        run: |
          echo "🧾 EC2 시스템 로그 조회 (kubelet, bootstrap 문제 확인)"
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:eks:nodegroup-name,Values=eks-node-group" \
            --query "Reservations[].Instances[0].InstanceId" \
            --output text)

          if [ "$INSTANCE_ID" != "None" ] && [ "$INSTANCE_ID" != "" ]; then
            aws ec2 get-console-output --instance-id "$INSTANCE_ID" --output text
          else
            echo "❌ 인스턴스 없음, 시스템 로그 확인 불가"
          fi
